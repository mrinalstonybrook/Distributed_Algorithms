from time import sleep
class Ptimestamp(DistProcess):
   def setup(s,reqQueue,process_id,no_req):
          d = []
          reqId,reqc,inCS,isReq  = 0,-1,0,0
          
   def cs(task,req_to_serve,flag):
       # to enter cs, enqueue and send request to all
      --request
      if(flag == 0):
        return 1
      reqId = req_to_serve
      isReq = 1
      output("Process no: " + str(process_id) + " request cs for Request no: " + str(reqId))
      reqc = logical_clock()
      
      send(Request(reqc), s)
      await(all(any(c3 > reqc for c3 in received(Reply(c3, p3))) for p3 in s))
      isReq = 0
      
      # critical section
      inCS = 1
      task()
      work()
      # to exit cs, dequeue and send release to all
      --release
      sleep(0.2)
      output("Process no: " + str(process_id) + " release cs for Request No: " + str(reqId))
      inCS = 0
      for p2 in s:
        if(p2 in d):
          send(Reply(logical_clock(), self), p2)
          no_req -=1
          d.remove(p2)
      
   def main():
      def anounce():
         output("Process no: " + str(process_id) + " in cs for Request No: " + str(reqId))
      [cs(anounce,req,1) for req in reqQueue]
      while (no_req > 0):
           cs(anounce,0,0)


   # when receiving request from others, enque and reply
   def OnRequest(req):
      if( (isReq != 1  and inCS != 1) or (req,_source) < (reqc,self) ):
       send(Reply(logical_clock(), self), _source)
       no_req -=1
      else:
       d.append(_source)
